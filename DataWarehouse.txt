数据仓库的目的：
	减少数据的重复开发
	统一数据口径
	复杂问题简单化

数据建模：
	维度建模：(星型模型，星座模型，雪花模型)选择业务处理过程 > 定义粒度 > 选择维度 > 确定事实
	范式模型：3NF
	Data Vault：Hub（关键核心业务实体）、Link（关系）、Satellite（实体属性）三部分组成 
	Anchor 模型：高度可扩展的模型，所有的扩展只是添加而不是修改，因此它将模型规范到6NF，基本变成了K-V结构模型。企业很少使用。
	
事实表：事务性事实表，周期型事实表，累积快照事实表
建表原则：
	原则 1：尽可能包含所有与业务过程相关的事实
	原则 2：只选择与业务过程相关的事实；
	原则 3：分解不可加性事实为可加的组件
		如，订单的优惠率，应分解为订单原价金额与订单优惠金额两个事实存储在事实表中；
	原则 4：在选择维度和事实之前必须先声明粒度
	原则 5：在同一个事实表中不能有多种不同粒度的事实
	原则 6：事实的单位要保持一致
	原则 7：对事实的 null 值要处理
	原则 8：使用退化维度提高事实表的易用性
	
维度表设计原则：
	1）维度属性尽量丰富，为数据使用打下基础
	2）给出详实的、富有意义的文字描述
	3）区分数值型属性和事实
	4）沉淀出通用的维度属性，为建立一致性维度做好铺垫
	5）退化维度（Degenerate Dimension）
	6）缓慢变化维（Slowly Changing Dimensions）
	
缓慢变化维的三种常用处理方式：
	① TYPE1 直接覆盖原值
	② TYPE2 拉链表
	③ TYPE3 增加属性列

维度表设计方法：选择维度或新建维度，确定主维表，确定相关维表，确定维度属性 。

数据仓库研发过程：
	需求阶段：数据产品经理应如何应对不断变化的业务需求。
	设计阶段：数据产品经理、数据开发者应如何综合性能、成本、效率、质量等因素，更好地组织与存储数据。
	开发阶段：数据研发者如何高效、规范地进行编码工作。
	测试阶段：测试人员应如何准确地暴露代码问题与项目风险，提升产出质量。
	发布阶段：如何将具备发布条件的程序平稳地发布到线上稳定产出。
	运维阶段：运维人员应如何保障数据产出的时效性和稳定性。
	
	1)系统分析，确定主题。通过与业务部门的交流，了解建立数仓要解决的问题，确认各个主题下的查询分析要求
	2)选择满足数据仓库系统要求的软件平台。选择合适的软件平台，包括数据库、建模工具、分析工具等
	3)建立数据仓库的逻辑模型。确定建立数据仓库逻辑模型的基本方法，基于主题视图，把主题视图中的数据定义转到逻辑数据模型中
	4)逻辑数据模型转换为数据仓库数据模型
	5)数据仓库数据模型优化。随着需求和数据量的变化进行调整
	6)数据清洗转换和传输。业务系统中的数据加载到数据仓库之前，必须进行数据的清洗和转换，保证数据仓库中数据的一致性。
	7)开发数据仓库的分析应用。满足业务部门对数据进行分析的需求。
	8)数据仓库的管理。包括数据库管理和元数据管理。

Lambda：Batch Layer，Speed Layer和Serving Layer。
Kappa架构的核心思想包括以下三点：
	用Kafka或者类似的分布式队列系统保存数据，你需要几天的数据量就保存几天。
	当需要全量重新计算时，重新起一个流计算实例，从头开始读取数据进行处理，并输出到一个新的结果存储中。
	当新的实例做完后，停止老的流计算实例，并把老的一些结果删除。

数据治理：数据规划、制定数据标准、整理数据、搭建数据管理工具、构建运维体系及推广贯标
	
数据治理的目的:
	降低风险
	建立数据使用内部规则
	实施合规要求
	改善内部和外部沟通
	增加数据价值
	方便数据管理
	降低成本
	通过风险管理和优化来帮助确保公司的持续生存
	
数据资源梳理：数据治理的第一个步骤是从业务的视角厘清组织的数据资源环境和数据资源清单，包含组织机构、业务事项、信息系统，以及以数据库、网页、文件和 API 接口形式存在的数据项资源，本步骤的输出物为分门别类的数据资源清单。

数据采集清洗：通过可视化的 ETL 工具（例如阿里的 DataX，Pentaho Data Integration）将数据从来源端经过抽取 (extract)、转换 (transform)、加载 (load) 至目的端的过程，目的是将散落和零乱的数据集中存储起来。

基础库主题库建设：一般情况下，可以将数据分为基础数据、业务主题数据和分析数据。基础数据一般指的是核心实体数据，或称主数据，例如智慧城市中的人口、法人、地理信息、信用、电子证照等数据。主题数据一般指的是某个业务主题数据，例如市场监督管理局的食品监管、质量监督检查、企业综合监管等数据。而分析数据指的是基于业务主题数据综合分析而得的分析结果数据，例如市场监督管理局的企业综合评价、产业区域分布、高危企业分布等。那么基础库和主题库的建设就是在对业务理解的基础上，基于易存储、易管理、易使用的原则抽像数据存储结构，说白了，就是基于一定的原则设计数据库表结构，然后再根据数据资源清单设计数据采集清洗流程，将整洁干净的数据存储到数据库或数据仓库中。

元数据管理：元数据管理是对基础库和主题库中的数据项属性的管理，同时，将数据项的业务含义与数据项进行了关联，便于业务人员也能够理解数据库中的数据字段含义，并且，元数据是后面提到的自动化数据共享、数据交换和商业智能（BI）的基础。需要注意的是，元数据管理一般是对基础库和主题库中（即核心数据资产）的数据项属性的管理，而数据资源清单是对各类数据来源的数据项的管理。

血缘追踪：数据被业务场景使用时，发现数据错误，数据治理团队需要快速定位数据来源，修复数据错误。那么数据治理团队需要知道业务团队的数据来自于哪个核心库，核心库的数据又来自于哪个数据源头。我们的实践是在元数据和数据资源清单之间建立关联关系，且业务团队使用的数据项由元数据组合配置而来，这样，就建立了数据使用场景与数据源头之间的血缘关系。数据资源目录：数据资源目录一般应用于数据共享的场景，例如政府部门之间的数据共享，数据资源目录是基于业务场景和行业规范而创建，同时依托于元数据和基础库主题而实现自动化的数据申请和使用。

质量管理：数据价值的成功发掘必须依托于高质量的数据，唯有准确、完整、一致的数据才有使用价值。因此，需要从多维度来分析数据的质量，例如：偏移量、非空检查、值域检查、规范性检查、重复性检查、关联关系检查、离群值检查、波动检查等等。需要注意的是，优秀的数据质量模型的设计必须依赖于对业务的深刻理解，在技术上也推荐使用大数据相关技术来保障检测性能和降低对业务系统的性能影响，例如 Hadoop，MapReduce，HBase 等。

商业智能（BI）：数据治理的目的是使用，对于一个大型的数据仓库来说，数据使用的场景和需求是多变的，那么可以使用 BI 类的产品快速获取需要的数据，并分析形成报表，比较知名的产品有 Microsoft Power BI，QlikView，Tableau，帆软等。

数据共享交换：数据共享包括组织内部和组织之间的数据共享，共享方式也分为库表、文件和 API 接口三种共享方式，库表共享比较直接粗暴，文件共享方式通过 ETL 工具做一个反向的数据交换也就可以实现。我们比较推荐的是 API 接口共享方式，在这种方式下，能够让中心数据仓库保留数据所有权，把数据使用权通过 API 接口的形式进行了转移。API 接口共享可以使用 API 网关实现，常见的功能是自动化的接口生成、申请审核、限流、限并发、多用户隔离、调用统计、调用审计、黑白名单、调用监控、质量监控等等。


ETL:(新增，新增及变化，全量)
	抽取（Extract）主要是针对各个业务系统及不同服务器的分散数据，充分理解数据定义后，规划需要的数据源及数据定义，制定可操作的数据源，制定增量抽取和缓慢渐变的规则。

	转换（transform）主要是针对数据仓库建立的模型，通过一系列的转换来实现将数据从业务模型到分析模型，通过ETL工具可视化拖拽操作可以直接使用标准的内置代码片段功能、自定义脚本、函数、存储过程以及其他的扩展方式，实现了各种复杂的转换，并且支持自动分析日志，清楚的监控数据转换的状态并优化分析模型。

	装载（Load）主要是将经过转换的数据装载到数据仓库里面，可以通过直连数据库的方式来进行数据装载，可以充分体现高效性。在应用的时候可以随时调整数据抽取工作的运行方式，可以灵活的集成到其他管理系统中。

OLAP分类：
	MOLAP：基于多维数组的存储模型，也是OLAP最初的形态，特点是对数据进行预计算，以空间换效率，
			明细和聚合数据都保存在cube中。但生成cube需要大量时间和空间。
		
	ROLAP：基于关系模型进行存储数据，不需要预计算，按需即时查询。明细和汇总数据都保存在关系型数据库事实表中。
		其特点是与事务实体对应，关系清晰；但一般需要较为复杂的数据准备。在响应前端需求时，一般较快，但取决于计算引擎能力。
		
	HOLAP：混合模型，细节数据以ROLAP存放，聚合数据以MOLAP存放。这种方式相对灵活，且更加高效。
		可按企业业务场景和数据粒度进行取舍，没有最好，只有最适合。

OLAP基本操作
	★钻取：维的层次变化，从粗粒度到细粒度，汇总数据下钻到明细数据。如通过季度销售数据钻取每个月的销售数据。
	★上卷：钻取的逆，向上钻取。从细粒度到粗粒度，细粒度数据到不同维层级的汇总。eg. 通过每个月的销售数据汇总季度、年销售数据。
	★切片：特定维数据（剩余维两个）。eg. 只选电子产品销售数据。
	★切块：维区间数据（剩余维三个）。eg. 第一季度到第二季度销售数据。
	★旋转：维位置互换（数据行列互换），通过旋转可以得到不同视角的数据。
	
数据仓库标准上可以分为四层：ODS（临时存储层）、PDW（数据仓库层）、DM（数据集市层）、APP（应用层）。


